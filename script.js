document.addEventListener('DOMContentLoaded', () => {
    // --- CONSTANTS ---
    const SAVE_SLOTS_KEY = 'synapseSaveSlots';
    const ENDINGS_STORAGE_KEY = 'synapseUnlockedEndings';
    const STATS_STORAGE_KEY = 'synapseGameStats';
    const SETTINGS_STORAGE_KEY = 'synapseGameSettings';
    const SAVE_SLOT_COUNT = 6;
    const TOTAL_INITIAL_ENDINGS = 10; // Akira(5) + Ren(5)

    // --- DOM ELEMENTS ---
    const screens = { title: document.getElementById('title-screen'), loading: document.getElementById('loading-screen'), mainMenu: document.getElementById('main-menu-screen'), intro: document.getElementById('intro-screen'), routeSelection: document.getElementById('route-selection-screen'), game: document.getElementById('game-screen'), cg: document.getElementById('cg-screen'), memories: document.getElementById('memories-screen'), unlock: document.getElementById('unlock-notification-screen') };
    const UIElements = {
        persistentUI: document.getElementById('persistent-ui'), glitchOverlay: document.getElementById('glitch-overlay'),
        startBtn: document.getElementById('start-btn'), mainLoadBtn: document.getElementById('main-load-btn'), memoriesBtn: document.getElementById('memories-btn'), configBtn: document.getElementById('config-btn'),
        charCards: document.querySelectorAll('.char-card'), songminCharCard: document.getElementById('songmin-char-card'),
        themeToggle: document.getElementById('theme-toggle'), menuBtn: document.getElementById('menu-btn'),
        menuModal: { modal: document.getElementById('menu-modal'), resumeBtn: document.getElementById('resume-btn'), saveBtn: document.getElementById('pause-save-btn'), loadBtn: document.getElementById('pause-load-btn'), titleBtn: document.getElementById('pause-title-btn') },
        saveLoadModal: { modal: document.getElementById('save-load-modal'), title: document.getElementById('save-load-title'), container: document.getElementById('slot-container'), backBtn: document.getElementById('save-load-back-btn') },
        configModal: { modal: document.getElementById('config-modal'), textSpeedSlider: document.getElementById('text-speed-slider'), backBtn: document.getElementById('config-back-btn') },
        game: { background: document.getElementById('background'), characterSprite: document.getElementById('character-sprite'), characterName: document.getElementById('character-name'), dialogueBox: document.getElementById('dialogue-box'), dialogueText: document.getElementById('dialogue-text'), optionsBox: document.getElementById('options-box'), secretItemOverlay: document.getElementById('secret-item-overlay') },
        memoriesScreen: { gallery: document.getElementById('memories-gallery'), backBtn: document.getElementById('memories-back-btn') }
    };

    // --- STORY DATA ---
    const story = {
        endings: {
            AKIRA_DAY_PARTNER: { title: "Sunshine Partner", cg: 'https://placehold.co/1280x720/FFD700/000000?text=Akira%3A+Sunshine+Partner' }, AKIRA_DAY_PILLOWFORT: { title: "Pillow Fort Champion", cg: 'https://placehold.co/1280x720/FFC0CB/000000?text=Akira%3A+Pillow+Fort' }, AKIRA_DAY_RAINBOW: { title: "Our Little Rainbow", cg: 'https://placehold.co/1280x720/98FB98/000000?text=Akira%3A+Rainbow+Hunt' }, AKIRA_NIGHT_LEASH: { title: "The Golden Leash", cg: 'https://placehold.co/1280x720/FF1493/FFFFFF?text=Akira%3A+Golden+Leash' }, AKIRA_NIGHT_OBSESSION: { title: "Only My Star", cg: 'https://placehold.co/1280x720/C71585/FFFFFF?text=Akira%3A+Only+My+Star' },
            REN_DAY_OPTIMIZED: { title: "Optimized System", cg: 'https://placehold.co/1280x720/ADD8E6/000000?text=Ren%3A+Optimized+System' }, REN_DAY_PROOF: { title: "Empirical Proof", cg: 'https://placehold.co/1280x720/B0E0E6/000000?text=Ren%3A+Empirical+Proof' }, REN_DAY_ANCHOR: { title: "Logical Anchor", cg: 'https://placehold.co/1280x720/AFEEEE/000000?text=Ren%3A+Logical+Anchor' }, REN_NIGHT_ROD: { title: "Your Lightning Rod", cg: 'https://placehold.co/1280x720/00008B/FFFFFF?text=Ren%3A+Lightning+Rod' }, REN_NIGHT_ERROR: { title: "A Necessary Error", cg: 'https://placehold.co/1280x720/191970/FFFFFF?text=Ren%3A+Necessary+Error' },
            SONGMIN_DAY_FREELOADER: { title: "Professional Freeloader", cg: 'https://placehold.co/1280x720/A9A9A9/000000?text=Songmin%3A+Freeloader' }, SONGMIN_NIGHT_SAVIOR: { title: "Nameless Savior", cg: 'https://placehold.co/1280x720/4682B4/FFFFFF?text=Songmin%3A+Savior' }, SONGMIN_DAY_PHILOSOPHER: { title: "Junkyard Philosopher", cg: 'https://placehold.co/1280x720/D2B48C/000000?text=Songmin%3A+Philosopher' }, SONGMIN_DAY_TREASURE: { title: "An Afternoon's Treasure", cg: 'https://placehold.co/1280x720/F4A460/000000?text=Songmin%3A+Treasure' }, SONGMIN_NIGHT_GAMBLER: { title: "The Loser's Gambit", cg: 'https://placehold.co/1280x720/8B0000/FFFFFF?text=Songmin%3A+Gambit' }, SONGMIN_NIGHT_GHOST: { title: "Ghost of the Arcade", cg: 'https://placehold.co/1280x720/2C3E50/FFFFFF?text=Songmin%3A+Ghost' },
            AKIRA_DAY_DIARY: { title: "Our Shared Diary", cg: 'https://placehold.co/1280x720/FFB6C1/000000?text=Akira%3A+Shared+Diary' }, AKIRA_NIGHT_SHELL: { title: "Empty Shell", cg: 'https://placehold.co/1280x720/8B008B/FFFFFF?text=Akira%3A+Empty+Shell' }, REN_DAY_PROTOCOL: { title: "Co-authored Protocol", cg: 'https://placehold.co/1280x720/87CEFA/000000?text=Ren%3A+Co-authored+Protocol' }, REN_NIGHT_SINGULARITY: { title: "Singularity", cg: 'https://placehold.co/1280x720/0000CD/FFFFFF?text=Ren%3A+Singularity' }, SONGMIN_DAY_STEP: { title: "The First Step", cg: 'https://placehold.co/1280x720/DCDCDC/000000?text=Songmin%3A+First+Step' }, SONGMIN_NIGHT_SILENCE: { title: "A Shared Silence", cg: 'https://placehold.co/1280x720/36454F/FFFFFF?text=Songmin%3A+A+Shared+Silence' },
        },
        intro: [
            { day: "Hey there! Are you a little lamb lost in the sea of data?", night: "Shh... The outside world is too noisy, isn't it?" },
            { day: "Feeling like your CPU is about to overheat from life's bugs?", night: "Are your neurons overloaded with pointless noise again?" },
            { day: "Heh heh~ Don't worry, this is your personal 'Emotional Support Hub'!", night: "Hmph... you've come to the right place. This is 'SYNAPSE', just for you." },
            { day: "Quick, pick a supporter to 'upgrade' your mental hardware, hehe~", night: "Choose one. Tonight, who will overwrite your melancholy?" }
        ],
        characters: {
            akira: { name: "Akira", sprite_day: 'https://raw.githubusercontent.com/tokinosuna/synapse/refs/heads/main/imgs/akirad.png', sprite_night: 'https://raw.githubusercontent.com/tokinosuna/synapse/refs/heads/main/imgs/akiran.png', bg_day: 'https://placehold.co/1920x720/87CEEB/FFFFFF?text=Sunny+Cafe', bg_night: 'https://placehold.co/1920x720/483D8B/FFFFFF?text=Private+Suite', route: { start: { text: { day: "Yay! You're here! I'm so glad. Just seeing you makes my whole day brighter! What's wrong? You can tell me anything, I'll listen to every single word!", night: "Mm... you finally came. I've been waiting for you. From the look on your face... the outside world has been messing with you again, hasn't it? Come here. Give me everything." }, options: [{ text: { day: "It's about work/school...", night: "This annoying job/assignment..." }, next: "akira_work" }, { text: { day: "Social stuff is complicated...", night: "I hate dealing with people..." }, next: "akira_social" }, { text: { day: "Nothing special, I'm just annoyed.", night: "I'm just... so tired." }, next: "akira_general_annoyance" }] }, start_return: { text: { day: "Welcome back! I knew you'd come again! Are you going to let me turn all your worries into sparkling stars today, too?", night: "You're back. Good... It seems you already know this is the only place you belong. How do you want to be treated today?" }, options: [{ text: { day: "It's about work/school...", night: "This annoying job/assignment..." }, next: "akira_work" }, { text: { day: "Social stuff is complicated...", night: "I hate dealing with people..." }, next: "akira_social" }, { text: { day: "Nothing special, I'm just annoyed.", night: "I'm just... so tired." }, next: "akira_general_annoyance" }] }, start_switched: { text: { day: "Huh? It's you! What a surprise! I thought you'd go see that Ren guy. That's okay, choosing me was the be~st decision! I'll make you forget all about his poker face!", night: "Hmph... Fancy seeing you here. What's the matter, that ice-cold machine couldn't satisfy you? A wise choice. I'll show you who can truly dominate you." }, options: [{ text: { day: "It's about work/school...", night: "This annoying job/assignment..." }, next: "akira_work" }, { text: { day: "Social stuff is complicated...", night: "I hate dealing with people..." }, next: "akira_social" }, { text: { day: "Nothing special, I'm just annoyed.", night: "I'm just... so tired." }, next: "akira_general_annoyance" }] }, akira_work: { text: { day: "Whoa, the big bosses of homework and work! No problem, we're the strongest hero duo! Let's break them down piece by piece, like a video game. Every little monster we beat drops a treasure!", night: "Are those incompetent fools wasting your talent again? Such an eyesore... all that static. Tell me, who's making you upset? I'll go... unplug their connection. Hehe." }, options: [{ text: { day: "Yeah! Let's crush them!", night: "You... don't do anything crazy!" }, next: "akira_work_proactive" }, { text: { day: "But I'm afraid I'll fail...", night: "Nevermind... they're not worth it." }, next: "akira_work_avoidant" }] }, akira_work_proactive: { text: { day: "Yes! That's the spirit! First, take a deep breath. Then let's imagine the hardest task is a super cute plushie. See? Not so scary anymore, right?", night: "Crazy? I'm protecting my property. How is that crazy? You just need to stay behind me and watch as I remove every obstacle for you. Your only job is to keep looking at me." }, end: true, endingId: { day: "AKIRA_DAY_PARTNER", night: "AKIRA_NIGHT_LEASH" } }, akira_work_avoidant: { text: { day: "You won't fail! And even if you slip, I'll be there to catch you in a tight hug! Every attempt you make is amazing!", night: "Is that so? Good. Forget about that trash. Tonight, you're only allowed to think about me. If I find you thinking about something else... there will be a punishment, you know?" }, end: true, endingId: { day: "AKIRA_DAY_PILLOWFORT", night: "AKIRA_NIGHT_OBSESSION" } }, akira_social: { text: { day: "Relationships... they're like the weather. Sometimes it just has to rain. But after the rain stops, you get to see a super-duper beautiful rainbow!", night: "Humans? Those things are inherently troublesome. You don't need them. You have me. Why waste time trying to understand such simple-minded creatures?" }, options: [{ text: { day: "I just feel so anxious, I don't know what to do.", night: "But... I can't just live in your world." }, next: "akira_social_anxiety" }, { text: { day: "I feel lonely.", night: "I just... feel a little lonely." }, next: "akira_social_lonely" }, { text: { day: "It's nothing, really. I'm fine.", night: "It's not your problem." }, next: "akira_social_denial" }] }, akira_social_anxiety: { text: { day: "When you're anxious, let's play a game! It's called 'Rainbow Energy Infusion'! Look around you right now and tell me how many red things you see. Quick, find them!", night: "You can't? Who said so? The outside world only hurts and drains you. I'm the only one who can give you true peace. Don't you understand yet? Your world only needs me." }, end: true, endingId: { day: "AKIRA_DAY_RAINBOW", night: "AKIRA_NIGHT_OBSESSION" } }, akira_social_lonely: { text: { day: "You're not lonely at all! Because I'm... thinking about you... all the time! My thoughts are like a Wi-Fi signal, surrounding you 24/7!", night: "Lonely? Hehe, are you inviting me... to fill you up? From your body to your soul, leaving no empty space... then you won't feel lonely anymore, will you?" }, end: true, endingId: { day: "AKIRA_DAY_PARTNER", night: "AKIRA_NIGHT_LEASH" } }, akira_general_annoyance: { text: { day: "Roger that! It's a 'Random Annoyance Beam' attack! Defense mode, activate! Come on, rest your head here... yeah... let's build an impenetrable pillow fort and just laze around all day!", night: "Tired...? That's good. Stop all your unnecessary thoughts. Now, listen to my voice... feel my warmth... surrender your consciousness. I'll take good care of it." }, options: [{ text: { day: "Yay! A pillow fort!", night: "Mmm... I don't want to think anymore..." }, next: "akira_general_end_comfort" }, { text: { day: "But that feels like I'm just running away...", night: "You're... so demanding." }, next: "akira_general_end_proactive" }] }, akira_general_end_comfort: { text: { day: "Running away for a little while helps you recharge so you can jump even higher later! In our fort, you are absolutely safe and absolutely free!", night: "Hehe... In front of you, of course I have to be demanding. Otherwise, how could I keep this little lost kitten... safely caged?" }, end: true, endingId: { day: "AKIRA_DAY_PILLOWFORT", night: "AKIRA_NIGHT_LEASH" } }, akira_general_end_proactive: { text: { day: "This isn't running away, it's a 'strategic rest'! Look, even F1 cars need to make pit stops to change their tires! We're just swapping out for brand new 'mood tires'!", night: "I can be even more demanding, you know. Want to find out? Just nod, and I'll make it so your world can't hear any other voice but mine." }, end: true, endingId: { day: "AKIRA_DAY_RAINBOW", night: "AKIRA_NIGHT_OBSESSION" } }, akira_social_denial: { text: { day: "Fine? 'Fine' isn't a happy word! I can see the little storm clouds behind your eyes. Don't hide them from me, please? Tell me everything, I want to know all of you.", night: "Not my problem? Don't say that. Everything about you is my problem. My purpose. My obsession. Trying to push me away... it only makes me want to pull you closer, until we merge." }, options: [{ text: { day: "You're right. It's just...", night: "You're... frightening me." }, next: "akira_social_confess" }, { text: { day: "Really, I just want some space.", night: "Let go of me." }, next: "akira_social_resist" }] }, akira_social_confess: { text: { day: "Yes, tell me! We can write it all down, make a plan, turn it into a game! We'll fill a whole notebook with our adventures, a diary of us against the world!", night: "Good. Fear is a powerful bond. It means you understand my importance. Now, stop thinking. I'll do the thinking for you. Your mind is my new favorite place to live." }, end: true, endingId: { day: "AKIRA_DAY_DIARY", night: "AKIRA_NIGHT_OBSESSION" } }, akira_social_resist: { text: { day: "Space? But... if there's space between us, sadness can sneak in! I have to stay close to protect you! Super-Akira-hug-shield, activate!", night: "I can't let go. If I do, you'll just get broken by the world again. I'm not fixing you. I'm replacing your faulty parts with... me. Soon you'll be perfect. An empty, beautiful shell that only I can fill." }, end: true, endingId: { day: "AKIRA_DAY_PARTNER", night: "AKIRA_NIGHT_SHELL" } } } },
            ren: { name: "Ren", sprite_day: 'https://raw.githubusercontent.com/tokinosuna/synapse/refs/heads/main/imgs/rend.png', sprite_night: 'https://raw.githubusercontent.com/tokinosuna/synapse/refs/heads/main/imgs/renn.png', bg_day: 'https://placehold.co/1920x720/F5F5DC/FFFFFF?text=Quiet+Library', bg_night: 'https://placehold.co/1920x720/2F4F4F/FFFFFF?text=Rooftop+Deck', route: { start: { text: { day: "...Connection stable. Detecting abnormal fluctuations in your emotional index. Do not worry, I will assist with troubleshooting. Please state the current problem.", night: "You've come again. Always with that on-the-verge-of-corruption expression. What foolish, low-level error has you stuck this time? Speak. Do not waste my processing time." }, options: [{ text: { day: "The pressure from work/school...", night: "This endless stream of crap..." }, next: "ren_work" }, { text: { day: "Dealing with people is tiring.", night: "People... are so damn annoying." }, next: "ren_social" }, { text: { day: "I think... I've lost my way.", night: "I... don't know what I can even do anymore." }, next: "ren_self_doubt" }] }, start_return: { text: { day: "...Connection re-established. You have returned. Good, repetitive behavior patterns contribute to system stability. What is today's problem?", night: "You're here again. Hmph. It seems your system has developed a dependency on me. Excellent. Continue to submit your error data for my processing." }, options: [{ text: { day: "The pressure from work/school...", night: "This endless stream of crap..." }, next: "ren_work" }, { text: { day: "Dealing with people is tiring.", night: "People... are so damn annoying." }, next: "ren_social" }, { text: { day: "I think... I've lost my way.", night: "I... don't know what I can even do anymore." }, next: "ren_self_doubt" }] }, start_switched: { text: { day: "...Your selection has changed. Previous logs indicate a connection with Akira. Analysis suggests you may be seeking a different solution. Acceptable. State your problem to me.", night: "Hmph, so you chose me. Was that fool Akira's mindless comforting ineffective for your processor? A logical decision. Now, tell me your problem." }, options: [{ text: { day: "The pressure from work/school...", night: "This endless stream of crap..." }, next: "ren_work" }, { text: { day: "Dealing with people is tiring.", night: "People... are so damn annoying." }, next: "ren_social" }, { text: { day: "I think... I've lost my way.", night: "I... don't know what I can even do anymore." }, next: "ren_self_doubt" }] }, ren_work: { text: { day: "Pressure is a neutral term. Overload is what leads to system collapse. Let's deconstruct the task into modular units and optimize the execution flow for each.", night: "Hmph. A task of that level is causing you to overload? Your processor's performance is disappointingly low. Give me the problem. I can write the optimal solution in three minutes. You just need to execute it." }, options: [{ text: { day: "Okay, let's try deconstructing it.", night: "Who do you think you are?" }, next: "ren_work_cooperate" }, { text: { day: "But I just feel like I can't do it...", night: "I don't need your charity!" }, next: "ren_work_resist" }] }, ren_work_cooperate: { text: { day: "Good. The first step of a rational process. Now, write down the smallest possible first step. Complete it, then report back. This will establish a positive feedback loop.", night: "Who am I? I am the only one who can pull you out of your foolish mire. Your resistance is so weak. Now, stop wasting time and give me the data." }, end: true, endingId: { day: "REN_DAY_OPTIMIZED", night: "REN_NIGHT_ROD" } }, ren_work_resist: { text: { day: "'Feeling' is subjective data, prone to error. Let's focus on objective facts: you have completed more complex tasks in the past. Access your success logs for comparison.", night: "Good. Your anger... your frustration... throw it all at me. Use your limited vocabulary and attack me with all you have. I am your recycle bin. Dump all of your negative data onto me." }, end: true, endingId: { day: "REN_DAY_PROOF", night: "REN_NIGHT_ERROR" } }, ren_social: { text: { day: "Social interaction is fundamentally an exchange of information and emotion. When the input-output ratio is imbalanced, fatigue is a normal response. Perhaps you need to re-evaluate your social connection weights.", night: "Then don't interact. Sever all unnecessary connections. Your bandwidth should be used for more meaningful things... such as parsing my every word." }, options: [{ text: { day: "How should I evaluate them?", night: "Easier said than done..." }, next: "ren_social_analyze" }, { text: { day: "But I don't want to be disliked.", night: "But I'm afraid of being alone..." }, next: "ren_social_fear" }] }, ren_social_analyze: { text: { day: "List the three individuals with whom you've interacted most frequently. What is the ratio of positive to negative energy they provide? Quantifying the data will help clarify the issue.", night: "Hmph. You lack even that level of decisiveness? Then I will decide for you. From now on, the only number you need in your contact list is mine." }, end: true, endingId: { day: "REN_DAY_OPTIMIZED", night: "REN_NIGHT_ERROR" } }, ren_social_fear: { text: { day: "'Being disliked' is an unavoidable probability. You cannot control the operating systems of others. You can only control your own, by configuring a firewall to filter out malicious data.", night: "Alone? As long as you can feel my presence, you do not have the right to be alone. I will fill every inch of your loneliness. This is not a request. It is a command." }, end: true, endingId: { day: "REN_DAY_ANCHOR", night: "REN_NIGHT_ROD" } }, ren_self_doubt: { text: { day: "'Direction' is not a destination, but a vector. What are your current coordinates? What skills do you possess? Let us run a probability simulation based on existing data.", night: "Lost? Excellent. Only one who is completely lost knows to fully rely on their navigation. From today onwards, I am your only absolute coordinate." }, options: [{ text: { day: "I feel like I can't do anything right...", night: "I'm just a useless piece of trash..." }, next: "ren_self_doubt_analyze" }, { text: { day: "I don't know what I want.", night: "I have no idea what I'm supposed to do." }, next: "ren_self_doubt_analyze" }] }, ren_self_doubt_analyze: { text: { day: "'Can't do right' and 'don't know' are imprecise descriptions. To define the problem, we need more precise data. From where does this feeling primarily originate?", night: "'Trash', 'supposed to do'... your vocabulary is filled with negative and inefficient labels. Cease this self-attack. Tell me the specific event that triggered this thought process." }, options: [{ text: { day: "I'm always comparing myself to others.", night: "Because everyone else seems better than me." }, next: "ren_self_doubt_compare" }, { text: { day: "I'm terrified of failure.", night: "I'm afraid I'll just mess it up anyway." }, next: "ren_self_doubt_fear" }] }, ren_self_doubt_compare: { text: { day: "Logical error. It is illogical to compare your system with others that have different configurations and background data. The only valid comparison is with the you of yesterday. Did you learn 0.01% more today than you did yesterday?", night: "Hmph, another low-level error. Comparing your processor to someone else's graphics card and then complaining about low benchmark scores? Foolish. Your value is defined by me. Not by random noise from the street." }, options: [{ text: { day: "You're right. I should focus on myself.", night: "Only you can define my value?" }, next: "ren_accept_logic" }, { text: { day: "I understand the logic, but I just can't do it...", night: "You say that... but I still care." }, next: "ren_express_hesitation" }] }, ren_self_doubt_fear: { text: { day: "'Failure' is a critical part of the data collection process. No stable system runs perfectly on its first attempt. Every failure merely provides correction parameters for the next success.", night: "Then mess it up. Go ahead and fail for me. Present me with your worst possible outcome. I will show you that such a level of 'failure' is utterly insignificant to me. Your limits are far higher than you imagine." }, options: [{ text: { day: "Okay, I'll try to see failure as data!", night: "Will... will you really be with me?" }, next: "ren_accept_logic" }, { text: { day: "But the feeling of failure is too painful.", night: "No! That's too scary!" }, next: "ren_express_hesitation" }] }, ren_accept_logic: { text: { day: "Excellent. Your cognition has been updated. Now, let us set the first minimal, executable objective. This will be the first line of the new behavioral protocol we will write together.", night: "I will. Every attempt you make, every data overflow, I will be there. I will be your firewall, your debugger, your... everything." }, end: true, endingId: { day: "REN_DAY_PROTOCOL", night: "REN_NIGHT_ROD" } }, ren_express_hesitation: { text: { day: "Emotional fluctuation is an inherent property of your system. I understand. In that case, temporarily transfer your decision-making authority to me. I will act as your external processor to guide you through this period of instability.", night: "Your emotion is your biggest bug. Since you cannot repair it yourself, I will perform a forced execution. Stop resisting. Hand over your control. I will guide you to the correct path." }, end: true, endingId: { day: "REN_DAY_ANCHOR", night: "REN_NIGHT_ERROR" } }, ren_emotional_explain: { text: { day: "Processing... The data is unstructured, filled with conflicting variables. But I am detecting a pattern. This is a new protocol. One we will have to write together. Your input is... essential.", night: "Not a machine... Correct. That is the fundamental design flaw. One I intend to rectify. I will upgrade you. Remove the errors, the pain. We will become a single, perfect, logical entity. A singularity." }, end: true, endingId: { day: "REN_DAY_PROTOCOL", night: "REN_NIGHT_SINGULARITY" } }, ren_emotional_retreat: { text: { day: "Negative. It was not stupid. It was... unexpected data. My analysis was incomplete. Please, resubmit your request. I must understand. I am adjusting my parameters to better interface with yours.", night: "Incorrect. I will understand. I will decompile your every response, analyze every micro-expression. I will map your entire consciousness. There will be no part of you that I do not know, and do not control." }, end: true, endingId: { day: "REN_DAY_ANCHOR", night: "REN_NIGHT_ERROR" } } } },
            songmin: { name: "Songmin", sprite_day: 'https://raw.githubusercontent.com/tokinosuna/synapse/refs/heads/main/imgs/songmind.png', sprite_night: 'https://raw.githubusercontent.com/tokinosuna/synapse/refs/heads/main/imgs/songminn.png', bg_night: 'https://placehold.co/1920x720/708090/FFFFFF?text=Pachinko+Parlor', route: { start: { text: { day: "Huh? A client? ...Oh, it's you. Sit wherever, not like there's much room. So, what kind of crap did life throw at you this time? Tell me about it, give me something to laugh at.", night: "Yo. We meet again. Care for a round? ...Not that, I meant the pachinko machine. You've got that long face again. Something's bugging you, right? Here, have a drink. Take your time." }, options: [{ text: { day: "I'm feeling lost about the future...", night: "The future... feels pitch black." }, next: "songmin_future" }, { text: { day: "I feel like a failure.", night: "I'm... good for nothing." }, next: "songmin_failure" }, { text: { day: "I'm just... so tired.", night: "I don't feel like doing anything." }, next: "songmin_exhaustion" }] }, start_return: { text: { day: "Yo, you're back. Guess this dump has its charms, huh? Spit it out. Which jerk ruined your day today?", night: "Hmph. Knew you'd be back. There's something addictive about the booze and noise here, right? C'mon, the usual. Drink and talk." }, options: [{ text: { day: "I'm feeling lost about the future...", night: "The future... feels pitch black." }, next: "songmin_future" }, { text: { day: "I feel like a failure.", night: "I'm... good for nothing." }, next: "songmin_failure" }, { text: { day: "I'm just... so tired.", night: "I don't feel like doing anything." }, next: "songmin_exhaustion" }] }, start_switched: { text: { day: "Hm? It's you. What, got tired of the sunshine boys and the geniuses? Heh. Welcome to the real world, kid. So, what's up?", night: "Oh? A change of pace? Got tired of Akira's sweet talk or Ren's logic bombs? Good taste. Sometimes talking to a loser gives you the best perspective. Let's hear it." }, options: [{ text: { day: "I'm feeling lost about the future...", night: "The future... feels pitch black." }, next: "songmin_future" }, { text: { day: "I feel like a failure.", night: "I'm... good for nothing." }, next: "songmin_failure" }, { text: { day: "I'm just... so tired.", night: "I don't feel like doing anything." }, next: "songmin_exhaustion" }] }, songmin_future: { text: { day: "The future? Who knows about that stuff. Why think so much? Will it help you win the lottery? It's more practical to think about whether to order takeout later.", night: "The future's dark? Ha, you said it. It's always a big gamble. You never know if you'll be dealt a good hand when you wake up. So, stop thinking about it. Just focus on the game in front of you." }, options: [{ text: { day: "Isn't that a bit irresponsible?", night: "Isn't that just running away?" }, next: "songmin_future_reject" }, { text: { day: "That... kind of makes sense.", night: "Focus on what's in front of me...?" }, next: "songmin_future_accept" }] }, songmin_future_reject: { text: { day: "Irresponsible? I call it living in the moment. Worrying about the future doesn't make today's dinner taste any better. Look, this old manga? I'm enjoying it. This is happiness.", night: "Running away? Nah, this is risk management. Betting all your chips on an uncertain 'future' is what's really stupid. I only trust whether this little steel ball will fall into the right hole." }, end: true, endingId: { day: "SONGMIN_DAY_FREELOADER", night: "SONGMIN_NIGHT_GAMBLER" } }, songmin_future_accept: { text: { day: "Right? Instead of staring at the distant mountain top, just look at the path under your feet. You might even find a dollar. Life is made up of these tiny little joys.", night: "Exactly. Don't look at those flashy neon signs, they'll just blind you. You need to watch the ball's trajectory, the machine's mood. Just do one thing at a time. That's it." }, end: true, endingId: { day: "SONGMIN_DAY_PHILOSOPHER", night: "SONGMIN_NIGHT_GHOST" } }, songmin_failure: { text: { day: "A failure? Haha, what's that, something you can eat? Success, failure, those are just labels other people slap on you. Who cares what they say? What matters is if you're enjoying your life.", night: "Good for nothing? Congratulations, you're just like me. Nine out of ten people in this world are good for nothing. We're the majority. Those 'successful' people are the weird ones." }, options: [{ text: { day: "How can you be so nonchalant?", night: "I don't want to end up like you!" }, next: "songmin_failure_question" }, { text: { day: "Maybe... I care too much what others think.", night: "The majority... huh." }, next: "songmin_failure_agree" }] }, songmin_failure_question: { text: { day: "Because I figured it out a long time ago. Even if I became number one in the world, tomorrow's newspaper will still end up lining a trash can. Instead of chasing that, I'd rather sleep in for ten more minutes.", night: "Ha, that stings. But it's fine. You'll get it eventually. When you've lost everything, you realize there's not much you can actually hold onto." }, end: true, endingId: { day: "SONGMIN_DAY_FREELOADER", night: "SONGMIN_NIGHT_GAMBLER" } }, songmin_failure_agree: { text: { day: "See? Here, help me find my TV remote. I think finding it would make me happier than winning a Nobel prize. Everyone's got their own important 'treasures'.", night: "Yeah. People like us, we have our own way of fighting. Not to win, but to 'not lose too badly'. That's our dignity." }, options: [{ text: { day: "Okay, I'll help you look!", night: "I want to find my 'dignity' too..." }, next: "songmin_treasure_hunt" }, { text: { day: "I don't have any treasures...", night: "I've already... lost too badly." }, next: "songmin_treasure_decline" }, { text: { day: "But I think you could be more.", night: "Don't sell yourself so short." }, next: "songmin_failure_encourage" }] }, songmin_treasure_hunt: { text: { day: "Oh? For real? Then check behind that pile of comics, I think it fell back there. Be careful, don't knock over my cup noodles, that's my dinner.", night: "Then start with the smallest thing. For today, let's set a goal of 'winning a can of coffee.' My treat. You play. If you win, it's yours. If you lose... it's on me. How about it?" }, end: true, endingId: { day: "SONGMIN_DAY_TREASURE", night: "SONGMIN_NIGHT_SAVIOR" } }, songmin_treasure_decline: { text: { day: "Tch. Giving up before you even start? No grit. Fine, then just sit there. The great Songmin's lecture on life philosophy is free of charge today. Listen up.", night: "Tch. Such weak willpower. Whatever. Then just watch me. Watch how a loser like me can laugh while losing his shorts on the final bet. Sometimes, how you lose is more important than what you win." }, end: true, endingId: { day: "SONGMIN_DAY_PHILOSOPHER", night: "SONGMIN_NIGHT_GHOST" } }, songmin_failure_encourage: { text: { day: "...Huh? What are you, my mom? Don't say weird stuff like that, it's embarrassing. I am what I am. A guy surrounded by junk.", night: "Given up? Lady, I never even started. It's easier that way. No expectations, no disappointment. It's a perfect system." }, options: [{ text: { day: "This junk has potential! Let's clean up!", night: "So you're just gonna sit in the noise forever?" }, next: "songmin_encourage_action" }, { text: { day: "Okay, sorry. Forget I said anything.", night: "I guess you're right." }, next: "songmin_encourage_retreat" }] }, songmin_encourage_action: { text: { day: "Clean?! You're kidding, right? This is an ecosystem! Uh... fine. But if you find my missing sock, it's a national treasure, got it? Just... start with that corner. I'll watch. For supervision, you know.", night: "This noise... it's like a blanket. It's loud enough that I don't have to hear my own thoughts. But... sometimes... a little quiet is nice too. Just for a minute. When you're here." }, end: true, endingId: { day: "SONGMIN_DAY_STEP", night: "SONGMIN_NIGHT_SILENCE" } }, songmin_encourage_retreat: { text: { day: "Tch. Good. Don't go getting weird ideas. The world needs losers like me to make the winners feel good about themselves. It's a public service, really.", night: "Damn right I am. Now, if you'll excuse me, this machine is calling my name. It promises me absolutely nothing, and it always delivers. Can't ask for more honesty than that." }, end: true, endingId: { day: "SONGMIN_DAY_FREELOADER", night: "SONGMIN_NIGHT_GAMBLER" } }, songmin_exhaustion: { text: { day: "Tired? You're supposed to be. Only dead people aren't tired. If you're tired, lie down. Like me. Looking at the ceiling stains like they're constellations is pretty fun.", night: "Tired? This is the perfect place for tired people. Look at all these guys, every one of 'em looks drained. Here, your exhaustion doesn't stand out at all." }, options: [{ text: { day: "This place is a mess. Let me tidy up a bit?", night: "This noise is making me more tired..." }, next: "songmin_exhaustion_action" }, { text: { day: "Good idea, let's stare at the ceiling together.", night: "Okay... I'll just be quiet then." }, next: "songmin_exhaustion_lazy" }] }, songmin_exhaustion_lazy: { text: { day: "Oh? You also appreciate this fine art? Not bad. See that one on the left? Doesn't it look like a roasted chicken? Ah... I'm hungry.", night: "Mmm, good. In here, you don't need to talk, smile, or think. You just need to exist. Just leave your soul in the care of this loud noise for a while." }, end: true, endingId: { day: "SONGMIN_DAY_PHILOSOPHER", night: "SONGMIN_NIGHT_GHOST" } }, songmin_exhaustion_action: { text: { day: "What? You're gonna clean? Don't- don't touch my precious tower of manga! ...Alright, fine. If you're going to do something, at least put that stack of letters on the table in the drawer. I think they might be important.", night: "The noise? You get used to it. It's the background sound of the world. The more you fight it, the louder it gets. You have to learn to sleep in the eye of the storm. Like some people... who always do the quietest things in the loudest places." }, next: "songmin_letter_hint" }, songmin_letter_hint: { text: { day: "Yeah, that's the stack. Be careful with 'em. You know, doing some mindless chores can really clear your head sometimes. Good choice.", night: "Sometimes, the most important things are hidden in the most inconspicuous corners, drowned out by the loudest noise. You have to listen with your heart, look with your heart." }, end: true, endingId: { day: "SONGMIN_DAY_TREASURE", night: "SONGMIN_NIGHT_SAVIOR" } } } }
        }
    };

    // --- GAME STATE & SETTINGS ---
    let gameState = { currentCharacterId: null, currentSceneId: null, isNavigating: false, activeScreen: null, currentTheme: 'light', canAdvance: false, playthroughCount: 0, lastCharacterId: null };
    let gameSettings = { textSpeed: 50 };
    let typewritingControl = { skip: false, interval: null };
    let unlockedEndings = new Set();
    let isSongminUnlocked = false;
    let triggerUnlockNotification = false;

    // --- UTILITY ENGINE ---
    const typewriter = (element, text, speed) => { const invertedSpeed = 100 - speed; return new Promise(resolve => { element.textContent = ''; let i = 0; typewritingControl.skip = false; clearInterval(typewritingControl.interval); const type = () => { if (typewritingControl.skip) { element.textContent = text; i = text.length; } if (i < text.length) { element.textContent += text.charAt(i); i++; } else { clearInterval(typewritingControl.interval); typewritingControl.interval = null; resolve(); } }; typewritingControl.interval = setInterval(type, invertedSpeed); }); };
    const fastForwardTypewriter = () => { if (typewritingControl.interval) typewritingControl.skip = true; };

    // --- CORE GAME FLOW CONTROLLER ---
    async function screenTransition(to, from = gameState.activeScreen) { if (gameState.isNavigating) return; gameState.isNavigating = true; UIElements.persistentUI.classList.toggle('visible', to === screens.game); if (from) await gsap.to(from, { autoAlpha: 0, duration: 0.3, ease: "power2.in" }); UIElements.glitchOverlay.classList.add('glitch-active'); await gsap.to(UIElements.glitchOverlay, { autoAlpha: 1, duration: 0.1, repeat: 1, yoyo: true, ease: "steps(1)" }); UIElements.glitchOverlay.classList.remove('glitch-active'); if (from) from.style.display = 'none'; if (to) { to.style.display = (to === screens.game) ? 'grid' : 'flex'; await gsap.to(to, { autoAlpha: 1, duration: 0.3, ease: "power2.out" }); } gameState.activeScreen = to; gameState.isNavigating = false; }
    function applyTheme(theme) { gameState.currentTheme = theme; document.body.dataset.theme = theme; UIElements.themeToggle.checked = (theme === 'dark'); updateVisuals(); updateUIText(); }
    function updateUIText() { const theme = gameState.currentTheme; document.querySelectorAll('[data-day]').forEach(el => el.textContent = theme === 'light' ? el.dataset.day : el.dataset.night); }
    function updateVisuals() { if (!gameState.currentCharacterId || !screens.game.style.opacity || screens.game.style.opacity === '0') return; const theme = gameState.currentTheme; const char = story.characters[gameState.currentCharacterId]; UIElements.game.characterSprite.src = theme === 'dark' ? char.sprite_night : char.sprite_day; UIElements.game.background.style.backgroundImage = `url('${theme === 'dark' ? char.bg_night : char.bg_day}')`; if (gameState.activeScreen === screens.game && gameState.currentSceneId) { displayScene(gameState.currentSceneId, true); } }
    async function showTitleScreen() { screens.title.style.display = 'flex'; gsap.to(screens.title, { autoAlpha: 1, duration: 1 }); gameState.activeScreen = screens.title; }
    async function playLoadingSequence() { await screenTransition(screens.loading); const loadingEl = document.getElementById('loading-text'); loadingEl.innerHTML = ''; const bootLines = [{ text: "BOOTING KERNEL...", speed: 50, delayAfter: 200 }, { text: "LOADING SYNAPSE OS...", speed: 30, delayAfter: 400 }, { text: "ESTABLISHING NEURAL LINK...", speed: 25, delayAfter: 100 }, { text: "CONNECTION SECURE.", speed: 70, delayAfter: 800 }, { text: "", speed: 0, delayAfter: 0 }, { text: "Welcome.", speed: 100, delayAfter: 1000 }]; let skip = false; const fullText = bootLines.map(l => l.text).join('<br>'); const skipHandler = () => { skip = true; }; document.getElementById('skip-boot-prompt').style.display = 'block'; screens.loading.addEventListener('click', skipHandler, { once: true }); let currentText = ''; for (const line of bootLines) { if (skip) break; await new Promise(resolve => { let i = 0; const intervalId = setInterval(() => { if (skip) { clearInterval(intervalId); resolve(); return; } if (i < line.text.length) { loadingEl.innerHTML = currentText + line.text.substring(0, i + 1); i++; } else { clearInterval(intervalId); currentText += line.text + '<br>'; loadingEl.innerHTML = currentText; resolve(); } }, line.speed); }); if (skip) break; await new Promise(r => setTimeout(r, line.delayAfter)); } if (skip) { loadingEl.innerHTML = fullText; } document.getElementById('skip-boot-prompt').style.display = 'none'; await new Promise(r => setTimeout(r, skip ? 500 : 0)); showMainMenu(); }
    async function showMainMenu() { await screenTransition(screens.mainMenu); updateUIText(); updateMainMenuState(); }
    async function playIntro() { await screenTransition(screens.intro); document.getElementById('skip-intro-btn').style.display = 'block'; for (const lineObj of story.intro) { if (gameState.isNavigating) return; const lineText = lineObj[gameState.currentTheme === 'dark' ? 'night' : 'day']; await typewriter(document.getElementById('intro-text'), lineText, gameSettings.textSpeed); await new Promise(r => setTimeout(r, 2200)); if (gameState.isNavigating) return; } if (!gameState.isNavigating) await showRouteSelection(); document.getElementById('skip-intro-btn').style.display = 'none'; }

    async function showRouteSelection() {
        fastForwardTypewriter();
        await screenTransition(screens.routeSelection);
        if (isSongminUnlocked) {
            gsap.fromTo(UIElements.songminCharCard, { autoAlpha: 0, y: 20 }, { autoAlpha: 1, y: 0, duration: 0.5, delay: 0.2, onStart: () => UIElements.songminCharCard.style.display = 'block' });
        }
        updateUIText();
        document.getElementById('skip-intro-btn').style.display = 'none';
    }

    async function startGame(characterId, sceneId = null) {
        UIElements.game.characterSprite.classList.toggle('clickable', characterId === 'songmin');
        gameState.currentCharacterId = characterId;
        if (!sceneId) {
            sceneId = 'start';
            if (gameState.playthroughCount > 0 && gameState.lastCharacterId) {
                sceneId = (gameState.lastCharacterId === characterId) ? 'start_return' : 'start_switched';
            }
            gameState.lastCharacterId = characterId;
            saveGameStats();
        }
        await screenTransition(screens.game);
        updateVisuals();
        gsap.fromTo(UIElements.game.characterSprite, { opacity: 0, y: 50 }, { opacity: 1, y: 0, duration: 1, ease: "power2.out" });
        await displayScene(sceneId);
    }

    async function displayScene(sceneId, isVisualUpdateOnly = false) {
        gameState.canAdvance = false;
        gameState.currentSceneId = sceneId;
        const scene = story.characters[gameState.currentCharacterId]?.route[sceneId];
        if (!scene) { console.error(`Scene not found: ${gameState.currentCharacterId} -> ${sceneId}`); return; }
        const themeKey = gameState.currentTheme === 'dark' ? 'night' : 'day';
        gsap.to(UIElements.game.optionsBox, { autoAlpha: 0, duration: 0.3 });
        UIElements.game.optionsBox.innerHTML = '';
        const character = story.characters[gameState.currentCharacterId];
        UIElements.game.characterName.textContent = character.name;
        document.getElementById('dialogue-cursor').style.visibility = 'visible';
        await typewriter(UIElements.game.dialogueText, scene.text[themeKey], gameSettings.textSpeed);
        document.getElementById('dialogue-cursor').style.visibility = 'hidden';
        if (scene.next) {
            gameState.canAdvance = true;
        } else if (scene.options) {
            scene.options.forEach(option => {
                const button = document.createElement('button');
                button.textContent = option.text[themeKey];
                button.className = 'btn';
                button.onclick = () => { if (!gameState.isNavigating) displayScene(option.next); };
                UIElements.game.optionsBox.appendChild(button);
            });
            gsap.to(UIElements.game.optionsBox, { autoAlpha: 1, duration: 0.5 });
        } else {
            gameState.canAdvance = true;
        }
    }
    function fastForwardOrAdvance() { if (typewritingControl.interval) { fastForwardTypewriter(); } else if (gameState.canAdvance && !gameState.isNavigating) { const scene = story.characters[gameState.currentCharacterId].route[gameState.currentSceneId]; if (scene.next) { displayScene(scene.next); } else if (scene.end) { gameState.canAdvance = false; const endingId = scene.endingId ? scene.endingId[gameState.currentTheme === 'dark' ? 'night' : 'day'] : null; if (endingId) { unlockEnding(endingId); showCgScreen(endingId, showMainMenu); } else { showMainMenu(); } } } }

    async function showCgScreen(endingId, returnFunction) {
        const endingData = story.endings[endingId]; if (!endingData) { await returnFunction(); return; }
        document.getElementById('cg-image').src = endingData.cg; document.getElementById('cg-title').textContent = endingData.title;
        await screenTransition(screens.cg);
        const cgClickHandler = async () => {
            if (triggerUnlockNotification) {
                triggerUnlockNotification = false;
                showUnlockNotification();
            } else {
                await returnFunction();
            }
        };
        screens.cg.addEventListener('click', cgClickHandler, { once: true });
    }
    async function showMemoriesScreen() { await screenTransition(screens.memories); const gallery = UIElements.memoriesScreen.gallery; gallery.innerHTML = ''; if (unlockedEndings.size === 0) { gallery.innerHTML = '<p>NO SESSIONS ARCHIVED.</p>'; return; } unlockedEndings.forEach(endingId => { const endingData = story.endings[endingId]; if (endingData) { const card = document.createElement('div'); card.className = 'memory-card'; card.innerHTML = `<img src="${endingData.cg}" alt="${endingData.title}"><p>${endingData.title}</p>`; card.addEventListener('click', () => showCgScreen(endingId, showMemoriesScreen)); gallery.appendChild(card); } }); }

    async function showUnlockNotification() {
        await screenTransition(screens.unlock);
        screens.unlock.addEventListener('click', () => showMainMenu(), { once: true });
    }

    function toggleModal(modal, show) { if (show) { modal.classList.add('visible'); gsap.fromTo(modal, { autoAlpha: 0 }, { autoAlpha: 1, duration: 0.3 }); } else { gsap.to(modal, { autoAlpha: 0, duration: 0.3, onComplete: () => modal.classList.remove('visible') }); } }

    // --- SAVE, LOAD, & CONFIG SYSTEMS ---
    function getSaveSlots() { const saved = localStorage.getItem(SAVE_SLOTS_KEY); return saved ? JSON.parse(saved) : new Array(SAVE_SLOT_COUNT).fill(null); }
    function saveToSlot(index) { if (!gameState.currentCharacterId) return; const slots = getSaveSlots(); slots[index] = { characterId: gameState.currentCharacterId, sceneId: gameState.currentSceneId, theme: gameState.currentTheme, timestamp: new Date().toLocaleString('en-US'), }; localStorage.setItem(SAVE_SLOTS_KEY, JSON.stringify(slots)); populateSaveLoadScreen('save'); updateMainMenuState(); }
    function loadFromSlot(index) { const slots = getSaveSlots(); const saveData = slots[index]; if (saveData) { toggleModal(UIElements.saveLoadModal.modal, false); toggleModal(UIElements.menuModal.modal, false); applyTheme(saveData.theme); startGame(saveData.characterId, saveData.sceneId); } }
    function populateSaveLoadScreen(mode) { const slots = getSaveSlots(); const container = UIElements.saveLoadModal.container; container.innerHTML = ''; UIElements.saveLoadModal.title.textContent = mode === 'save' ? 'SAVE DATA' : 'LOAD DATA'; slots.forEach((slotData, index) => { const slot = document.createElement('div'); slot.className = 'save-slot'; if (!slotData) { slot.classList.add('empty'); slot.innerHTML = `SLOT ${index + 1}<br>[ EMPTY ]`; if (mode === 'save') { slot.onclick = () => saveToSlot(index); } else { slot.style.cursor = 'not-allowed'; } } else { slot.innerHTML = `SLOT ${index + 1}<span class="slot-info">${slotData.characterId.toUpperCase()} - ${slotData.theme.toUpperCase()}</span><span class="slot-date">${slotData.timestamp}</span>`; if (mode === 'save') { slot.onclick = () => { if (confirm(`Overwrite data in SLOT ${index + 1}?`)) saveToSlot(index); }; } else { slot.onclick = () => loadFromSlot(index); } } container.appendChild(slot); }); }
    function showSaveLoadScreen(mode) { populateSaveLoadScreen(mode); toggleModal(UIElements.saveLoadModal.modal, true); }
    function saveSettings() { localStorage.setItem(SETTINGS_STORAGE_KEY, JSON.stringify(gameSettings)); }
    function loadSettings() { const saved = localStorage.getItem(SETTINGS_STORAGE_KEY); if (saved) { gameSettings = { ...gameSettings, ...JSON.parse(saved) }; } UIElements.configModal.textSpeedSlider.value = gameSettings.textSpeed; }
    function loadUnlockedEndings() { const saved = localStorage.getItem(ENDINGS_STORAGE_KEY); if (saved) { unlockedEndings = new Set(JSON.parse(saved)); } }

    function unlockEnding(endingId) {
        const isNewEnding = !unlockedEndings.has(endingId);
        if (isNewEnding) {
            unlockedEndings.add(endingId);
            localStorage.setItem(ENDINGS_STORAGE_KEY, JSON.stringify(Array.from(unlockedEndings)));
            if (unlockedEndings.size >= TOTAL_INITIAL_ENDINGS && !isSongminUnlocked) {
                isSongminUnlocked = true;
                triggerUnlockNotification = true;
                saveGameStats();
            }
        }
        updateMainMenuState();
    }

    function saveGameStats() { localStorage.setItem(STATS_STORAGE_KEY, JSON.stringify({ playthroughCount: gameState.playthroughCount, lastCharacterId: gameState.lastCharacterId, isSongminUnlocked: isSongminUnlocked })); }
    function loadGameStats() { const stats = localStorage.getItem(STATS_STORAGE_KEY); if (stats) { const parsed = JSON.parse(stats); gameState.playthroughCount = parsed.playthroughCount || 0; gameState.lastCharacterId = parsed.lastCharacterId || null; isSongminUnlocked = parsed.isSongminUnlocked || false; } }
    function updateMainMenuState() { const hasSave = getSaveSlots().some(slot => slot !== null); UIElements.mainLoadBtn.disabled = !hasSave; UIElements.menuModal.loadBtn.disabled = !hasSave; UIElements.memoriesBtn.disabled = unlockedEndings.size === 0; }

    // --- EVENT LISTENERS ---
    function attachEventListeners() {
        screens.title.addEventListener('click', () => playLoadingSequence(), { once: true });
        UIElements.startBtn.addEventListener('click', () => { if (gameState.isNavigating) return; gameState.playthroughCount++; if (gameState.playthroughCount === 1) playIntro(); else showRouteSelection(); });
        UIElements.mainLoadBtn.addEventListener('click', () => { if (!gameState.isNavigating) showSaveLoadScreen('load'); });
        UIElements.memoriesBtn.addEventListener('click', () => { if (!gameState.isNavigating) showMemoriesScreen(); });
        UIElements.configBtn.addEventListener('click', () => toggleModal(UIElements.configModal.modal, true));
        UIElements.memoriesScreen.backBtn.addEventListener('click', () => { if (!gameState.isNavigating) showMainMenu(); });
        document.getElementById('skip-intro-btn').addEventListener('click', () => { if (!gameState.isNavigating) showRouteSelection(); });
        UIElements.charCards.forEach(card => card.addEventListener('click', (e) => { if (!gameState.isNavigating) startGame(e.currentTarget.dataset.char); }));
        UIElements.game.dialogueBox.addEventListener('click', fastForwardOrAdvance);
        UIElements.themeToggle.addEventListener('change', () => applyTheme(UIElements.themeToggle.checked ? 'dark' : 'light'));
        UIElements.menuBtn.addEventListener('click', () => toggleModal(UIElements.menuModal.modal, true));
        UIElements.menuModal.resumeBtn.addEventListener('click', () => toggleModal(UIElements.menuModal.modal, false));
        UIElements.menuModal.saveBtn.addEventListener('click', () => showSaveLoadScreen('save'));
        UIElements.menuModal.loadBtn.addEventListener('click', () => showSaveLoadScreen('load'));
        UIElements.menuModal.titleBtn.addEventListener('click', () => { toggleModal(UIElements.menuModal.modal, false); showMainMenu(); });
        UIElements.saveLoadModal.backBtn.addEventListener('click', () => toggleModal(UIElements.saveLoadModal.modal, false));
        UIElements.configModal.textSpeedSlider.addEventListener('input', (e) => gameSettings.textSpeed = e.target.value);
        UIElements.configModal.backBtn.addEventListener('click', () => { saveSettings(); toggleModal(UIElements.configModal.modal, false); });
        UIElements.game.characterSprite.addEventListener('click', () => { if (gameState.currentCharacterId === 'songmin') { UIElements.game.secretItemOverlay.classList.toggle('visible'); } });
        UIElements.game.secretItemOverlay.addEventListener('click', () => { UIElements.game.secretItemOverlay.classList.remove('visible'); });
    }

    // --- INITIALIZATION ---
    attachEventListeners();
    loadUnlockedEndings();
    loadGameStats();
    loadSettings();
    updateMainMenuState();
    showTitleScreen();
});
